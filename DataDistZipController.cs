// This file has been autogenerated from parsing an Objective-C header file added in Xcode.

using System;
using MonoTouch.Foundation;
using MonoTouch.UIKit;
using MonoTouch.CoreLocation;
using MonoTouch.MapKit;

namespace Xplore_Lite
{
	public partial class DataDistZipController : UIViewController
	{
		MKCircle circleOverlay;
		MKCircleView circleView;

		public override void ViewDidLoad ()
		{
			Console.WriteLine("Map to load");
			base.ViewDidLoad ();
			
			Title = "MapView";
			
			//mapView = new MKMapView(View.Bounds);	
			this.DDZMapView.AutoresizingMask = UIViewAutoresizing.FlexibleDimensions;		
			//this.DDZMapView.MapType = MKMapType.Standard;	// this is the default
			//this.DDZMapView.MapType = MKMapType.Satellite;
			//this.DDZMapView.MapType = MKMapType.Hybrid;
			View.AddSubview(this.DDZMapView);
			
			// create our location and zoom 
			CLLocationCoordinate2D coords = new CLLocationCoordinate2D(38.9686111, -77.3413889); // Reston
			MKCoordinateSpan span = new MKCoordinateSpan(MilesToLatitudeDegrees(2), MilesToLongitudeDegrees(2, coords.Latitude));
			
			// set the coords and zoom on the map
			this.DDZMapView.Region = new MKCoordinateRegion(coords, span);

			circleOverlay = MKCircle.Circle (coords, 200);
			this.DDZMapView.AddOverlay (circleOverlay);
			
			this.DDZMapView.GetViewForOverlay = (m, o) => {
				if(circleView == null)
				{
					circleView = new MKCircleView(o as MKCircle);
					circleView.FillColor = UIColor.Purple;
					circleView.Alpha = 0.5f;
				}
				return circleView;
			};

		}
		
		/// <summary>
		/// Converts miles to latitude degrees
		/// </summary>
		public double MilesToLatitudeDegrees(double miles)
		{
			double earthRadius = 3960.0;
			double radiansToDegrees = 180.0/Math.PI;
			return (miles/earthRadius) * radiansToDegrees;
		}
		
		/// <summary>
		/// Converts miles to longitudinal degrees at a specified latitude
		/// </summary>
		public double MilesToLongitudeDegrees(double miles, double atLatitude)
		{
			double earthRadius = 3960.0;
			double degreesToRadians = Math.PI/180.0;
			double radiansToDegrees = 180.0/Math.PI;
			
			// derive the earth's radius at that point in latitude
			double radiusAtLatitude = earthRadius * Math.Cos(atLatitude * degreesToRadians);
			return (miles / radiusAtLatitude) * radiansToDegrees;
		}

		public DataDistZipController (IntPtr handle) : base (handle)
		{
		}

	}
}
