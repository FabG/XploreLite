// This file has been autogenerated from parsing an Objective-C header file added in Xcode.

using System;
using MonoTouch.Foundation;
using MonoTouch.UIKit;
using Steema.TeeChart;
using Xplore.Framework.Common.DataProvider.DTO;
using System.ServiceModel;
using System.IO;
using System.Collections.Generic;
using System.Xml.Linq;
using System.Xml;

namespace Xplore_Lite
{
	public partial class DataSrvcConsViewController : UIViewController
	{
		private static readonly DataProviderServiceClient dataProviderClient = GetClient();

		// Lists to handle the Series name/data points coming from the webservice
		int i = 0;
		LoadingOverlay loadingOverlay;
		ActionSheetDatePicker actionSheetDatePicker;
		string[] datePickerResult;
		public TChart chart_DSC = new Steema.TeeChart.TChart();
		Steema.TeeChart.Styles.Pie pie_DSC = new Steema.TeeChart.Styles.Pie(); 
		System.Drawing.RectangleF r1;
		string dateButtonTitle = "Date: 08/10/2012";

		// Request variables
		string DateFilter = "Days~08/10/2012~08/10/2012"; // Default August 6th



		public override void ViewDidLoad ()
		{
			base.ViewDidLoad ();

			loadingOverlay = new LoadingOverlay (UIScreen.MainScreen.Bounds);
			View.Add (loadingOverlay);

			// Update Button default titles
			DSCDateButton.SetTitle(dateButtonTitle, UIControlState.Normal);


			// Chart settings 
			chart_DSC.Frame = DSCUIView.Frame;
			chart_DSC.Series.Add(pie_DSC);
			chart_DSC.Aspect.View3D = true;

			// Header
			chart_DSC.Header.Text = "Data Services Consumption";
			chart_DSC.Header.Visible = false;
			chart_DSC.Header.Alignment = MonoTouch.CoreText.CTTextAlignment.Center;
			chart_DSC.Header.Shadow.Visible = true;
			
			// Formating Legend
			chart_DSC.Legend.Alignment = LegendAlignments.Bottom;
			chart_DSC.Legend.Shadow.Visible=false;
			chart_DSC.Legend.Transparency = 50; 
			//chart_DSC.Legend.TextStyle = Steema.TeeChart.LegendTextStyles.Percent; // show percent values (37%, %,..)
			//chart_DSC.Legend.TextStyle = Steema.TeeChart.LegendTextStyles.Value; // show absolute values (0.37, 0.02,...)
			//chart_DSC.Legend.TextStyle = Steema.TeeChart.LegendTextStyles.XValue; // show series numbers (0,1,2...)
			chart_DSC.Legend.TextStyle = Steema.TeeChart.LegendTextStyles.Plain; // show series names (Mail, Browsing,...)

			// ************** ORIGINAL CODE WITH STATIC BAR CHART *************************
			//chart1.Frame = DSCUIView.Frame;
			//this.View.AddSubview(chart1);

			// Bar series
			//Steema.TeeChart.Styles.Bar bar1 = new Steema.TeeChart.Styles.Bar(); 
			//chart1.Series.Add(bar1);
			//chart1.Aspect.View3D = true;

			// Header
			//chart1.Header.Visible = false;

			// Formating Legend
			//chart1.Legend.Alignment = LegendAlignments.Bottom;
			//chart1.Legend.Shadow.Visible=false;
			//chart1.Legend.Transparency = 50; 

			// Static series
			//bar1.Add(44,"Browsing",UIColor.Blue.CGColor);  
			//bar1.Add(24,"Streaming",UIColor.Red.CGColor);  
			//bar1.Add(16,"Download / Upload / Gaming",UIColor.Green.CGColor);  
			//bar1.Add(6,"Communication / Messaging",UIColor.Yellow.CGColor);  

			// ************** NEW CODE WITH DYNAMIC PIE CHART (WEBSERVICE) *************************

			// Send the request - default date is: August 6th 2012
			dataRequest ("DSC", DateFilter);

			// Initialization
			// Pass callback when asynchronous call is done
			dataProviderClient.GetDataCompleted += (object sender2, GetDataCompletedEventArgs ev) => {
				if (ev.Result.Code == "GEN-0000")
				{
					// Parse Results
					dataResponse (ev);
				}
			};

			// Data series coming from xomScore SAxM demo website
			// WSDL Service used: http://saxm.comscore.com/DataProviderService.svc?wsdl
			// Proxy created with Silver light: AppDelegate.cs


			// Filters
			DSCIndicButton.TouchUpInside += (sender, e) => {
				Console.WriteLine("Indicator Button clicked");
			};

			DSCDateButton.TouchUpInside += (sender, e) => {
				Console.WriteLine("Date Button clicked");

				actionSheetDatePicker = new ActionSheetDatePicker (this.View);
				actionSheetDatePicker.Show ();
				actionSheetDatePicker.Title = "Choose Date:";
				actionSheetDatePicker.DatePicker.Mode = UIDatePickerMode.Date;

				// Limit dates seclection to what we have on the demo platform (August 2012)
				actionSheetDatePicker.DatePicker.Date = DateTime.Parse("2012-08-06");
				actionSheetDatePicker.DatePicker.MinimumDate = DateTime.Parse("2012-08-06").AddDays(-5);
				actionSheetDatePicker.DatePicker.MaximumDate = DateTime.Parse("2012-08-06").AddDays (24);			

				actionSheetDatePicker.DatePicker.ValueChanged += (s2, e2) => {
					datePickerResult = new string[3];
					// Month
					datePickerResult[0] = (s2 as UIDatePicker).Date.ToString().Substring(5,2);
					// Day
					datePickerResult[1] = (s2 as UIDatePicker).Date.ToString().Substring(8,2);
					// Year
					datePickerResult[2] = (s2 as UIDatePicker).Date.ToString().Substring(0,4);
					Console.WriteLine("Date: {0}/{1}/{2}", datePickerResult[0], datePickerResult[1], datePickerResult[2]); 

				};

				// Regenerate chart with new date
				actionSheetDatePicker.DoneButtonClicked += (s3, e3) => {

					// Update Date Button title
					dateButtonTitle="Date: " + datePickerResult[0] + "/"  + datePickerResult[1] 
									+ "/" + datePickerResult[2];
					DSCDateButton.SetTitle(dateButtonTitle, UIControlState.Normal);

					// Loading indicator
					View.Add (loadingOverlay);
					
					// Send request with new date (format = "Days~08/10/2012~08/10/2012")
					DateFilter = "Days~" + datePickerResult[0] + "/" 
						+ datePickerResult[1] + "/" + datePickerResult[2] + "~"
							+ datePickerResult[0] + "/" + datePickerResult[1] + "/" + datePickerResult[2];
					Console.WriteLine("DateFilter = {0}", DateFilter);
					
					dataRequest ("DSC", DateFilter);
				};
			};

			DSCCustButton.TouchUpInside += (sender, e) => {
				Console.WriteLine("Customer Type Button clicked");
			};

			DSCAgeButton.TouchUpInside += (sender, e) => {
				Console.WriteLine("Age Button clicked");
			};
		}


		public override void DidRotate(UIInterfaceOrientation fromInterfaceOrientation) 
		{
			// Refresh Chart rotating the device
			r1 = new System.Drawing.RectangleF(0,0,this.View.Bounds.Width/2,this.View.Bounds.Height/2);						
			chart_DSC.Frame = r1;

		}

		public override bool ShouldAutorotateToInterfaceOrientation (UIInterfaceOrientation toInterfaceOrientation)
		{
			// Return true for supported orientations			
			return true;
		}

		public DataSrvcConsViewController (IntPtr handle) : base (handle)
		{
		}

		// DataProvider Client
		public static DataProviderServiceClient GetClient()
		{
			BasicHttpBinding binding = new BasicHttpBinding();
			var endpointAddress = new EndpointAddress("http://saxm.comscore.com/DataProviderService.svc");
			var client = new DataProviderServiceClient(binding, endpointAddress);
			return client;
		}


		// Helper Method to create the ParamsDO object and send the request
		private void dataRequest (string dto_type, string filterDate)
		{
			// Pod accessed: http://saxm.comscore.com > Data Services Analysis Dashboard > Data Services Consumption
			var paramsDto = ParamsDTO.CreateParamsDTO(dto_type, filterDate);
			
			// Fill Request
			dataProviderClient.GetDataAsync("DASH_SQL_EXEC", paramsDto);
		}


		// Helper Method to parse the XML response from the callback
		private void dataResponse (GetDataCompletedEventArgs Response)
		{
			List<String> metadataColListName = new List<String>();
			List<String> metadataColListId = new List<String>();
			List<String> metadataRowListName = new List<String>();
			List<String> metadataRowListValue = new List<String>();

			Console.WriteLine("Response received");
			string xmlresultObject = Response.Result.ResultObject.ToString();
			/*// Console.WriteLine("xmlresultObject = {0}", xmlresultObject);
			//xmlresultObject=
			<GetData><MetaData>
						<Columns>
							<col id="No" name="No" type="number" />
							<col id="Network_id" name="Network_id" type="number" />
							<col id="service_x0020_group" name="service group" type="string" />
							<col id="Avg_x0020_Data_x0020_Volume_x0020_per_x0020_Session_x0020__x0028_MB_x0029_" name="Avg Data Volume per Session (MB)" type="number" />
							<col id="ROWID" name="ROWID" type="string" />
						</Columns>
						<Pagination actualPage="1" totalRowCount="6" totalPages="1" pageSize="25" />
						<AdditionalProperties><AdditionalProperty name="ROWNUM_COLID" value="No" />
						</AdditionalProperties>
						</MetaData>
						<Data><row No="1" Network_id="6" service_x0020_group="Communication / Messaging" Avg_x0020_Data_x0020_Volume_x0020_per_x0020_Session_x0020__x0028_MB_x0029_="0.01" ROWID="-979132663" /><row No="2" Network_id="5" service_x0020_group="Download / Upload / Gaming" Avg_x0020_Data_x0020_Volume_x0020_per_x0020_Session_x0020__x0028_MB_x0029_="0.47" ROWID="-876054502" /><row No="3" Network_id="4" service_x0020_group="Browsing" Avg_x0020_Data_x0020_Volume_x0020_per_x0020_Session_x0020__x0028_MB_x0029_="0.13" ROWID="-788535925" /><row No="4" Network_id="3" service_x0020_group="Streaming" Avg_x0020_Data_x0020_Volume_x0020_per_x0020_Session_x0020__x0028_MB_x0029_="1.98" ROWID="1697245990" /><row No="5" Network_id="2" service_x0020_group="Mail" Avg_x0020_Data_x0020_Volume_x0020_per_x0020_Session_x0020__x0028_MB_x0029_="0.08" ROWID="-867832989" /><row No="6" Network_id="1" service_x0020_group="Others" Avg_x0020_Data_x0020_Volume_x0020_per_x0020_Session_x0020__x0028_MB_x0029_="0.01" ROWID="1497011326" />
						</Data>
					  </GetData>
							*/
			
			/*// FirstNode is <MetaData>
			// Console.WriteLine("xmlFromMemStream.FirstNode:{0}",xElementFromStream.FirstNode);
			 xElementFromStream.FirstNode = 
					  <MetaData>
						  <Columns>
						    <col id="No" name="No" type="number" />
						    <col id="Network_id" name="Network_id" type="number" />
						    <col id="service_x0020_group" name="service group" type="string" />
						    <col id="Avg_x0020_Data_x0020_Volume_x0020_per_x0020_Session_x0020__x0028_MB_x0029_" name="Avg Data Volume per Session (MB)" type="number" />
						    <col id="ROWID" name="ROWID" type="string" />
						  </Columns>
						  <Pagination actualPage="1" totalRowCount="6" totalPages="1" pageSize="25" />
						  <AdditionalProperties>
						    <AdditionalProperty name="ROWNUM_COLID" value="No" />
						  </AdditionalProperties>
					 </MetaData>
					 */
			
			/*// LastNode is <Data>
			// Console.WriteLine("xmlFromMemStream.LastNode:{0}",xElementFromStream.LastNode);
			 xml.LastNode =
					 	<Data>
							<row No="1" Network_id="6" service_x0020_group="Communication / Messaging" Avg_x0020_Data_x0020_Volume_x0020_per_x0020_Session_x0020__x0028_MB_x0029_="0.01" ROWID="-979132663" />
							<row No="2" Network_id="5" service_x0020_group="Download / Upload / Gaming" Avg_x0020_Data_x0020_Volume_x0020_per_x0020_Session_x0020__x0028_MB_x0029_="0.47" ROWID="-876054502" />
							<row No="3" Network_id="4" service_x0020_group="Browsing" Avg_x0020_Data_x0020_Volume_x0020_per_x0020_Session_x0020__x0028_MB_x0029_="0.13" ROWID="-788535925" />
							<row No="4" Network_id="3" service_x0020_group="Streaming" Avg_x0020_Data_x0020_Volume_x0020_per_x0020_Session_x0020__x0028_MB_x0029_="1.98" ROWID="1697245990" />
							<row No="5" Network_id="2" service_x0020_group="Mail" Avg_x0020_Data_x0020_Volume_x0020_per_x0020_Session_x0020__x0028_MB_x0029_="0.08" ROWID="-867832989" />
							<row No="6" Network_id="1" service_x0020_group="Others" Avg_x0020_Data_x0020_Volume_x0020_per_x0020_Session_x0020__x0028_MB_x0029_="0.01" ROWID="1497011326" />
					 	<Data>
					*/
			
			var memStream = new MemoryStream(System.Text.Encoding.UTF8.GetBytes (Response.Result.ResultObject.ToString()));
			
			// Read the XML from memstream with XElement from XLinq
			XElement xElementFromStream = XElement.Load(memStream);
			
			// Assign Metadata and Data children to 2 lists that will feed the Chart
			if (xElementFromStream != null) 
			{ 
				// ********* XML MetaData ********
				System.Collections.Generic.IEnumerable<XElement> xmlMetaDataSerie = 
					xElementFromStream.Descendants("MetaData").Descendants("col");;
				
				// Add the name tag content to a list to pass it to the chart
				foreach(XElement col in xmlMetaDataSerie) 
				{
					metadataColListName.Add(col.Attribute("name").Value.ToString());
					metadataColListId.Add(col.Attribute("id").Value.ToString());
				}
				Console.WriteLine("Total Metadata Columns: {0}", metadataColListName.Count);
				i=0;
				foreach (string column in metadataColListName)
				{
					Console.WriteLine(" - metadataColList[{0}]: Name={1} | Id={2}", i, 
					                  metadataColListName[i], metadataColListId[i]);
					i++;
				}
				
				
				// ********* XML Data ********
				System.Collections.Generic.IEnumerable<XElement> xmlDataSerie = 
					xElementFromStream.Descendants("Data").Descendants("row");;
				
				// Add the name tag content to a list to pass it to the chart
				foreach(XElement row in xmlDataSerie) 
				{
					//Console.WriteLine("Data row :{0}", row.ToString());
					metadataRowListName.Add(row.Attribute("service_x0020_group").Value.ToString());
					metadataRowListValue.Add(row.Attribute("Avg_x0020_Data_x0020_Volume_x0020_per_x0020_Session_x0020__x0028_MB_x0029_").Value.ToString());
				}
				
				Console.WriteLine("Total Data Rows: {0}", metadataRowListName.Count);
				i=0;
				foreach (string row in metadataRowListName)
				{
					Console.WriteLine(" - metadataRowList[{0}]: Name={1} | Value={2}", i, 
					                  metadataRowListName[i], metadataRowListValue[i]);
					i++;
				}

				// Update Pie chart from the main UI Thread. To do so, need to use  NSObject.InvokeOnMainThread
				//  as Access to UI elements should be limited to the same thread that is running the main loop
				InvokeOnMainThread (delegate {
					loadingOverlay.Hide ();
					View.AddSubview(chart_DSC);
					
					i=0;
					pie_DSC.Clear();
					foreach (string row in metadataRowListName)
					{
						//Adding one by one series name and values - using random colors (not specified in the call)
						pie_DSC.Add(Convert.ToDouble(metadataRowListValue[i]),metadataRowListName[i]);
						i++;
					}
					// Changing Fomat of the pie to %
					pie_DSC.Marks.Style = Steema.TeeChart.Styles.MarksStyles.Percent;
					//pie_DSC.Labels.TrimToSize();
					
					
				});
			}
		} // End dataResponse

	}
}
